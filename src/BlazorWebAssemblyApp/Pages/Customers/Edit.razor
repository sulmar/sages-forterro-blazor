@page "/customers/edit/{id:int}"
@inject ICustomerService Api


<h3>Edit</h3>

@if (customer == null)
{

}
else
{
    <EditForm Model="@customer" OnValidSubmit="@HandleSubmit">

        <DataAnnotationsValidator />

        <ValidationSummary />

        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="customer.Name" />
        <ValidationMessage For="()=>customer.Name" />

        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="customer.Email" />
        <ValidationMessage For="()=>customer.Email" />

        <label for="balance">Balance:</label>
        <InputNumber id="balance" @bind-Value="customer.Balance" />
        <ValidationMessage For="()=>customer.Balance" />

        <label for="hashedPassword">HashedPassword:</label>
        <InputText id="hashedPassword" @bind-Value="customer.HashedPassword" />
        <ValidationMessage For="()=>customer.HashedPassword" />

        <label for="confirmedPassword">ConfirmedPassword:</label>
        <InputText id="confirmedPassword" @bind-Value="customer.ConfirmedPassword" />
        <ValidationMessage For="()=>customer.ConfirmedPassword" />

        <button type="submit" class="btn btn-primary">Submit</button>

    </EditForm>
}


@code {

    [Parameter]
    public int Id { get; set; }

    private Customer customer;

    protected override async Task OnParametersSetAsync()
    {
        customer = await Api.GetByIdAsync(Id);
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine($"HandleSubmit {customer.Name} {customer.Email}");
        // TODO: Dodać implementację
        // await Api.UpdateAsync(customer);
    }

}
